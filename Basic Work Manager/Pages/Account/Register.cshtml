@page
@model BasicWorkManager.Pages.RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="container bg-light translate-middle position-absolute top-50 start-50 p-4 rounded shadow-lg"
    style="max-width: 600px">
    <form method="post" id="registerForm">
        <h2 class="text-center mb-4">@Model.localizer.GetString("Title", Model)</h2>
        <div class="row g-2 mb-3">
            <div class="col-md form-floating">
                <input id="firstName" class="form-control" placeholder="@Model.localizer.GetString("FirstName", Model)" asp-for="Registration.FirstName" required>
                <label>@Model.localizer.GetString("FirstName", Model)</label>
            </div>
            <div class="col-md form-floating">
                <input id="lastName" class="form-control" placeholder="@Model.localizer.GetString("LastName", Model)" asp-for="Registration.LastName" required>
                <label>@Model.localizer.GetString("LastName", Model)</label>
            </div>
        </div>
        <div class="form-floating mb-3">
            <input id="emailInput" class="form-control" placeholder="@Model.localizer.GetString("EmailAddress", Model)" asp-for="Registration.EmailAddress" required>
            <label>@Model.localizer.GetString("EmailAddress", Model)</label>
            <div id="emailError" class="errorText mt-1">@Model.EmailError</div>
        </div>
        <div class="form-floating mb-3">
            <input id="userInput" class="form-control" placeholder="@Model.localizer.GetString("Username", Model)" asp-for="Registration.Username" required>
            <label>@Model.localizer.GetString("Username", Model)</label>
            <div id="userError" class="errorText mt-1">@Model.UsernameError</div>
        </div>
        <div class="form-floating mb-3">
            <input id="pass1" class="form-control" placeholder="@Model.localizer.GetString("Password", Model)" asp-for="Registration.Password" required>
            <label>@Model.localizer.GetString("Password", Model)</label>
        </div>
        <div class="form-floating mb-3">
            <input id="pass2" class="form-control" placeholder="@Model.localizer.GetString("ConfPassword", Model)" asp-for="Registration.PasswordConf" required>
            <label>@Model.localizer.GetString("ConfPassword", Model)</label>
        </div>
        <button type="submit" class="btn btn-primary mt-4">@Model.localizer.GetString("RegisterButton", Model)</button>
        <a class="btn btn-secondary ms-2 mt-4" asp-page="/Index">@Model.localizer.GetString("BackButton", Model)</a>
    </form>
</div>

<script>
    new bootstrap.Popover($("#pass1"), {
        title: "Password requirements",
        trigger: "focus",
        placement: "right",
        html: true,
        sanitize: false,
        content() {
            return document.querySelector("#passwordPopover").innerHTML;
        }
    });
    new bootstrap.Popover($("#pass2"), {
        title: "Password requirements",
        trigger: "focus",
        placement: "right",
        html: true,
        sanitize: false,
        content() {
            return document.querySelector("#passwordPopover").innerHTML;
        }
    });

    let condition1, condition2, condition3, condition4, condition5, condition6, condition7;
    let div1s, div2s, div3s, div4s, div5s, div6s, div7s;
    let div1Icons, div2Icons, div3Icons, div5Icons, div6Icons, div7Icons;

    div1s = document.getElementsByClassName("div1");
    div1Icons = document.getElementsByClassName("div1Icon");

    div2s = document.getElementsByClassName("div2");
    div2Icons = document.getElementsByClassName("div2Icon");

    div3s = document.getElementsByClassName("div3");
    div3Icons = document.getElementsByClassName("div3Icon");

    div4s = document.getElementsByClassName("div4");
    div4Icons = document.getElementsByClassName("div4Icon");

    div5s = document.getElementsByClassName("div5");
    div5Icons = document.getElementsByClassName("div5Icon");

    div6s = document.getElementsByClassName("div6");
    div6Icons = document.getElementsByClassName("div6Icon");

    div7s = document.getElementsByClassName("div7");
    div7Icons = document.getElementsByClassName("div7Icon");

    $(document).ready( () => {
        $("#emailInput").on("input", _ => $("#emailError").html(""));
        $("#userInput").on("input", _ => $("#userError").html(""));
        $("#pass1").on("input", () => checkAndUpdateRequirements());
        $("#pass1").on("select", () => checkAndUpdateRequirements());
        $("#pass2").on("input", () => checkAndUpdateRequirements());
        $("#pass2").on("select", () => checkAndUpdateRequirements());
        $("#registerForm").on("input", () => passwordValidation());
    });

    function checkAndUpdateRequirements()
    {
        let x = pass1.value;     //Just to shorten the lines below
        let y = x.toLowerCase(); //Just to shorten the lines below
        condition1 = x.length >= @Constants.MinPassLength ? true : false;
        condition2 = x.match("[a-z]") ? true : false;
        condition3 = x.match("[A-Z]") ? true : false;
        condition4 = x.match(/\d/) ? true : false;
        condition5 = x.match(/\W|_/) ? true : false;
        condition6 = y.includes(firstName.value.toLowerCase()) || y.includes(lastName.value.toLowerCase()) || y.includes(userInput.value.toLowerCase()) || y.includes(emailInput.value.toLowerCase().slice(0, emailInput.value.indexOf("@@"))) ? false : true;
        condition7 = x == pass2.value && pass1.value != ""  ? true : false;

        for (let i = 0; i < div1s.length; i++)
        {
            updateDivs(condition1, div1s[i], div1Icons[i]);

            if (div2s.length != 0)
                updateDivs(condition2, div2s[i], div2Icons[i]);

            if (div3s.length != 0)
                updateDivs(condition3, div3s[i], div3Icons[i]);

            if (div4s.length != 0)
                updateDivs(condition4, div4s[i], div4Icons[i]);

            if (div5s.length != 0)
                updateDivs(condition5, div5s[i], div5Icons[i]);

            updateDivs(condition6, div6s[i], div6Icons[i]);
            updateDivs(condition7, div7s[i], div7Icons[i]);
        }
    }

    function updateDivs(condition, div, icon)
    {
        condition ? div.classList.remove("text-danger") : div.classList.remove("text-success");
        condition ? div.classList.add("text-success") : div.classList.add("text-danger");
        
        condition ? icon.classList.remove("bi-x") : icon.classList.remove("bi-check");
        condition ? icon.classList.add("bi-check") : icon.classList.add("bi-x");
    }

    function passwordValidation(){
        //This whole thing below is to change the custom validation based on the boolean requirements from the Model
        //Thing is, I added this monstrosity before adding all conditions from above...
        //And I'm too lazy to change this, so I'm just hardcoding the custom validation below the comments.
        //I did all this for potential copy-paste to another project in the future, because I am not planning
        // on changing the password requirements in this project. Please forgive me!

        //let chmodThing;

        //if (div3s.length != 0)
        //    chmodThing = 1;
        //if (div4s.length != 0)
        //    chmodThing = chmodThing + 2;
        //if (div5s.length != 0)
        //    chmodThing = chmodThing + 4;

        //switch (chmodThing)
        //{
        //    case 1:
        //        if (condition1 && condition2)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 2:
        //        if (condition1 && condition3)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 3:
        //        if (condition1 && condition2 && condition3)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 4:
        //        if (condition1 && condition4)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 5:
        //        if (condition1 && condition2 && condition4)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 6:
        //        if (condition1 && condition3 && condition4)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    case 7:
        //        if (condition1 && condition2 && condition3 && condition4)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //        break;
        //    default:
        //        if (condition1)
        //            pass1.setCustomValidity("");
        //        else
        //            pass1.setCustomValidity("The password does not meet the requirements")
        //}

        pass1.setCustomValidity(condition1 && condition2 && condition3 && condition4 && condition5 && condition6 ? "" : "The password does not meet the requirements");
        pass2.setCustomValidity(condition7 ? "" : "The passwords do not match");
    }
</script>

<div id="passwordPopover" class="d-none">
    <div class="div1 fs-6 lh-1 text-danger">
        <span><i class="div1Icon bi bi-x"></i></span>
        <label>The password must have @Constants.MinPassLength or more characters in total</label>
    </div>

    @if (Constants.PassLowCaseReq)
    {
        <div class="div2 fs-6 lh-1 text-danger">
            <span><i class="div2Icon bi bi-x"></i></span>
            <label>The password must include at least 1 lower case letter</label>
        </div>
    }

    @if (Constants.PassUpCaseReq)
    {
        <div class="div3 fs-6 lh-1 text-danger">
            <span><i class="div3Icon bi bi-x"></i></span>
            <label>The password must include at least 1 upper case letter</label>
        </div>
    }

    @if (Constants.PassNumReq)
    {
        <div class="div4 fs-6 lh-1 text-danger">
            <span><i class="div4Icon bi bi-x"></i></span>
            <label>The password must include at least 1 number</label>
        </div>
    }
    
    @if (Constants.PassSpecReq)
    {
        <div class="div5 fs-6 lh-1 text-danger">
            <span><i class="div5Icon bi bi-x"></i></span>
            <label>The password must include at least 1 special character</label>
        </div>
    }

    <div class="div6 fs-6 lh-1 text-danger">
        <span><i class="div6Icon bi bi-x"></i></span>
        <label>The password must not contain your: first or last name,</label>
        <br />
        <span><i class="bi bi-x invisible"></i></span>
        <label class="ms-2"> email address and or your username</label>
    </div>

    <div class="div7 fs-6 lh-1 text-danger">
        <span><i class="div7Icon bi bi-x"></i></span>
        <label>The passwords must be equal</label>
    </div>
</div>